{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG } from \"./types\"; // export const getLogs = () => {\n// \treturn async (dispatch, getState) => {\n// \t\tsetLoading();\n// \t\tconst res = await fetch(\"/logs\");\n// \t\tconst data = await res.json();\n// \t\tdispatch({\n// \t\t\ttype: GET_LOGS,\n// \t\t\tpayload: data\n// \t\t});\n// \t};\n// };\n\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res.data\n    });\n  }\n};\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res.data\n    });\n  }\n};\nexport const deleteLogs = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs/\".concat(id), {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res\n    });\n  }\n};\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n};\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n};\nexport const updateLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs/\".concat(log.id), {\n      method: \"PUT\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res\n    });\n  }\n};\nexport const searchLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.res.data\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Ayappa\\Documents\\react-proects\\it_logger\\src\\actions\\logActions.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","error","addLog","log","method","body","JSON","stringify","headers","deleteLogs","id","setCurrent","clearCurrent","updateLog","searchLogs"],"mappings":"AAAA,SACCA,QADD,EAECC,WAFD,EAGCC,UAHD,EAICC,OAJD,EAKCC,UALD,EAMCC,WAND,EAOCC,aAPD,EAQCC,UARD,QASO,SATP,C,CAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEf,QADE;AAERgB,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GATD,CASE,OAAOI,KAAP,EAAc;AACfR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,UADE;AAERc,MAAAA,OAAO,EAAEC,KAAK,CAACN,GAAN,CAAUE;AAFX,KAAD,CAAR;AAIA;AACD,CAhBM;AAkBP,OAAO,MAAMK,MAAM,GAAGC,GAAG,IAAI,MAAMV,QAAN,IAAkB;AAC9C,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,EAAU;AAChCQ,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAF0B;AAGhCK,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAHuB,KAAV,CAAvB;AAOA,UAAMX,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEZ,OADE;AAERa,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GAfD,CAeE,OAAOI,KAAP,EAAc;AACfR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,UADE;AAERc,MAAAA,OAAO,EAAEC,KAAK,CAACN,GAAN,CAAUE;AAFX,KAAD,CAAR;AAIA;AACD,CAtBM;AAwBP,OAAO,MAAMY,UAAU,GAAGC,EAAE,IAAI,MAAMjB,QAAN,IAAkB;AACjD,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,iBAAUc,EAAV,GAAgB;AACtCN,MAAAA,MAAM,EAAE;AAD8B,KAAhB,CAAvB;AAIAX,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEX,UADE;AAERY,MAAAA,OAAO,EAAEU;AAFD,KAAD,CAAR;AAIA,GAVD,CAUE,OAAOT,KAAP,EAAc;AACfR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,UADE;AAERc,MAAAA,OAAO,EAAEC,KAAK,CAACN;AAFP,KAAD,CAAR;AAIA;AACD,CAjBM;AAmBP,OAAO,MAAMgB,UAAU,GAAER,GAAG,IAAK;AAChC,SAAO;AACNJ,IAAAA,IAAI,EAAEV,WADA;AAENW,IAAAA,OAAO,EAAEG;AAFH,GAAP;AAIA,CALM;AAMP,OAAO,MAAMS,YAAY,GAAG,MAAM;AACjC,SAAO;AACNb,IAAAA,IAAI,EAAET;AADA,GAAP;AAGA,CAJM;AAMP,OAAO,MAAMuB,SAAS,GAAGV,GAAG,IAAI,MAAMV,QAAN,IAAkB;AACjD,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,iBAAUO,GAAG,CAACO,EAAd,GAAoB;AAC1CN,MAAAA,MAAM,EAAE,KADkC;AAE1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAFoC;AAG1CK,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAHiC,KAApB,CAAvB;AAOA,UAAMX,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAER,UADE;AAERS,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GAfD,CAeE,OAAOI,KAAP,EAAc;AACfR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,UADE;AAERc,MAAAA,OAAO,EAAEC,KAAK,CAACN;AAFP,KAAD,CAAR;AAIA;AACD,CAtBM;AA0BP,OAAO,MAAMmB,UAAU,GAAG,MAAM,MAAMrB,QAAN,IAAkB;AACjD,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEf,QADE;AAERgB,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GATD,CASE,OAAOI,KAAP,EAAc;AACfR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,UADE;AAERc,MAAAA,OAAO,EAAEC,KAAK,CAACN,GAAN,CAAUE;AAFX,KAAD,CAAR;AAIA;AACD,CAhBM;AAkBP,OAAO,MAAMH,UAAU,GAAG,MAAM;AAC/B,SAAO;AAAEK,IAAAA,IAAI,EAAEd;AAAR,GAAP;AACA,CAFM","sourcesContent":["import {\r\n\tGET_LOGS,\r\n\tSET_LOADING,\r\n\tLOGS_ERROR,\r\n\tADD_LOG,\r\n\tDELETE_LOG,\r\n\tSET_CURRENT,\r\n\tCLEAR_CURRENT,\r\n\tUPDATE_LOG\r\n} from \"./types\";\r\n\r\n// export const getLogs = () => {\r\n// \treturn async (dispatch, getState) => {\r\n// \t\tsetLoading();\r\n// \t\tconst res = await fetch(\"/logs\");\r\n// \t\tconst data = await res.json();\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: GET_LOGS,\r\n// \t\t\tpayload: data\r\n// \t\t});\r\n// \t};\r\n// };\r\n\r\nexport const getLogs = () => async dispatch => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch(\"/logs\");\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: GET_LOGS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: error.res.data\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addLog = log => async dispatch => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch(\"/logs\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify(log),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: ADD_LOG,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: error.res.data\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const deleteLogs = id => async dispatch => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch(`/logs/${id}`, {\r\n\t\t\tmethod: \"DELETE\"\r\n\t\t});\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: DELETE_LOG,\r\n\t\t\tpayload: id\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: error.res\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const setCurrent =log =>  {\r\n\treturn {\r\n\t\ttype: SET_CURRENT,\r\n\t\tpayload: log\r\n\t};\r\n};\r\nexport const clearCurrent = () => {\r\n\treturn {\r\n\t\ttype: CLEAR_CURRENT\r\n\t};\r\n};\r\n\r\nexport const updateLog = log => async dispatch => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch(`/logs/${log.id}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify(log),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: UPDATE_LOG,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: error.res\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\n\r\nexport const searchLogs = () => async dispatch => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch(\"/logs\");\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: GET_LOGS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: error.res.data\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const setLoading = () => {\r\n\treturn { type: SET_LOADING };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}